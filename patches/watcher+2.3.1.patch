diff --git a/node_modules/watcher/dist/types.d.ts b/node_modules/watcher/dist/types.d.ts
index 819f534..6fc41a4 100644
--- a/node_modules/watcher/dist/types.d.ts
+++ b/node_modules/watcher/dist/types.d.ts
@@ -1,8 +1,8 @@
 /// <reference types="node" />
 import type { FSWatcher, BigIntStats } from 'node:fs';
 import type { ResultDirectories } from 'tiny-readdir';
-import type { FSTargetEvent, TargetEvent } from './enums';
-import type WatcherStats from './watcher_stats';
+import type { FSTargetEvent, TargetEvent } from './enums.d.ts';
+import type WatcherStats from './watcher_stats.d.ts';
 type Callback = () => void;
 type Disposer = () => void;
 type Event = [TargetEvent, Path, Path?];
diff --git a/node_modules/watcher/dist/utils.d.ts b/node_modules/watcher/dist/utils.d.ts
index 04221a1..027688f 100644
--- a/node_modules/watcher/dist/utils.d.ts
+++ b/node_modules/watcher/dist/utils.d.ts
@@ -3,7 +3,7 @@
 /// <reference types="node" />
 /// <reference types="node" />
 /// <reference types="node" />
-import type { Callback, Ignore, ReaddirMap, Stats } from './types';
+import type { Callback, Ignore, ReaddirMap, Stats } from './types.d.ts';
 declare const Utils: {
     lang: {
         debounce: <Args extends unknown[]>(fn: import("dettle/dist/types").FN<Args, unknown>, wait?: number | undefined, options?: import("dettle/dist/types").DebounceOptions | undefined) => import("dettle/dist/types").Debounced<Args>;
diff --git a/node_modules/watcher/dist/watcher.d.ts b/node_modules/watcher/dist/watcher.d.ts
index 352c3c2..1dd89d1 100644
--- a/node_modules/watcher/dist/watcher.d.ts
+++ b/node_modules/watcher/dist/watcher.d.ts
@@ -1,11 +1,11 @@
 /// <reference types="node" />
 /// <reference types="node" />
 import { EventEmitter } from 'node:events';
-import { TargetEvent } from './enums';
-import WatcherHandler from './watcher_handler';
-import WatcherLocker from './watcher_locker';
-import WatcherPoller from './watcher_poller';
-import type { Callback, Disposer, Handler, Ignore, Path, PollerConfig, SubwatcherConfig, WatcherOptions, WatcherConfig } from './types';
+import type { TargetEvent } from './enums.d.ts';
+import type WatcherHandler from './watcher_handler.d.ts';
+import type WatcherLocker from './watcher_locker.d.ts';
+import type WatcherPoller from './watcher_poller.d.ts';
+import type { Callback, Disposer, Handler, Ignore, Path, PollerConfig, SubwatcherConfig, WatcherOptions, WatcherConfig } from './types.d.ts';
 declare class Watcher extends EventEmitter {
     _closed: boolean;
     _ready: boolean;
diff --git a/node_modules/watcher/dist/watcher_handler.d.ts b/node_modules/watcher/dist/watcher_handler.d.ts
index b92ac0a..e9d3668 100644
--- a/node_modules/watcher/dist/watcher_handler.d.ts
+++ b/node_modules/watcher/dist/watcher_handler.d.ts
@@ -1,8 +1,8 @@
 /// <reference types="node" />
 /// <reference types="node" />
-import { FSTargetEvent } from './enums';
-import type Watcher from './watcher';
-import type { Event, FSWatcher, Handler, HandlerBatched, Path, WatcherOptions, WatcherConfig } from './types';
+import type { FSTargetEvent } from './enums.d.ts';
+import type Watcher from './watcher.d.ts';
+import type { Event, FSWatcher, Handler, HandlerBatched, Path, WatcherOptions, WatcherConfig } from './types.d.ts';
 declare class WatcherHandler {
     base?: WatcherHandler;
     watcher: Watcher;
diff --git a/node_modules/watcher/dist/watcher_locker.d.ts b/node_modules/watcher/dist/watcher_locker.d.ts
index 4b948a5..10dd3a1 100644
--- a/node_modules/watcher/dist/watcher_locker.d.ts
+++ b/node_modules/watcher/dist/watcher_locker.d.ts
@@ -1,6 +1,6 @@
-import { TargetEvent } from './enums';
-import type Watcher from './watcher';
-import type { Path, LocksAdd, LocksUnlink, LocksPair, LockConfig } from './types';
+import type { TargetEvent } from './enums.d.ts';
+import type Watcher from './watcher.d.ts';
+import type { Path, LocksAdd, LocksUnlink, LocksPair, LockConfig } from './types.d.ts';
 declare class WatcherLocker {
     _locksAdd: LocksAdd;
     _locksAddDir: LocksAdd;
diff --git a/node_modules/watcher/dist/watcher_poller.d.ts b/node_modules/watcher/dist/watcher_poller.d.ts
index ed1263f..d32b230 100644
--- a/node_modules/watcher/dist/watcher_poller.d.ts
+++ b/node_modules/watcher/dist/watcher_poller.d.ts
@@ -1,7 +1,7 @@
-import { FileType, TargetEvent } from './enums';
-import LazyMapSet from './lazy_map_set';
-import WatcherStats from './watcher_stats';
-import type { INO, Path } from './types';
+import type { FileType, TargetEvent } from './enums.d.ts';
+import type LazyMapSet from './lazy_map_set.d.ts';
+import type WatcherStats from './watcher_stats.d.ts';
+import type { INO, Path } from './types.d.ts';
 declare class WatcherPoller {
     inos: Partial<Record<TargetEvent, Record<Path, [INO, FileType]>>>;
     paths: LazyMapSet<INO, Path>;
diff --git a/node_modules/watcher/dist/watcher_stats.d.ts b/node_modules/watcher/dist/watcher_stats.d.ts
index 6173303..fb7bd4c 100644
--- a/node_modules/watcher/dist/watcher_stats.d.ts
+++ b/node_modules/watcher/dist/watcher_stats.d.ts
@@ -1,4 +1,4 @@
-import type { INO, Stats } from './types';
+import type { INO, Stats } from './types.d.ts';
 declare class WatcherStats {
     ino: INO;
     size: number;
diff --git a/node_modules/watcher/src/constants.ts b/node_modules/watcher/src/constants.ts
index c3a1804..92c2803 100644
--- a/node_modules/watcher/src/constants.ts
+++ b/node_modules/watcher/src/constants.ts
@@ -1,7 +1,7 @@
 
 /* IMPORT */
 
-import os from 'node:os';
+import * as os from 'node:os';
 
 /* MAIN */
 
diff --git a/node_modules/watcher/src/utils.ts b/node_modules/watcher/src/utils.ts
index 901638b..88f50d2 100644
--- a/node_modules/watcher/src/utils.ts
+++ b/node_modules/watcher/src/utils.ts
@@ -2,8 +2,8 @@
 /* IMPORT */
 
 import {debounce} from 'dettle';
-import fs from 'node:fs';
-import path from 'node:path';
+import * as fs from 'node:fs';
+import * as path from 'node:path';
 import sfs from 'stubborn-fs';
 import readdir from 'tiny-readdir';
 import {POLLING_TIMEOUT} from './constants';
diff --git a/node_modules/watcher/src/watcher.ts b/node_modules/watcher/src/watcher.ts
index 8638414..f141db3 100644
--- a/node_modules/watcher/src/watcher.ts
+++ b/node_modules/watcher/src/watcher.ts
@@ -2,8 +2,8 @@
 /* IMPORT */
 
 import {EventEmitter} from 'node:events';
-import fs from 'node:fs';
-import path from 'node:path';
+import * as fs from 'node:fs';
+import * as path from 'node:path';
 import {DEPTH, LIMIT, HAS_NATIVE_RECURSION, POLLING_INTERVAL} from './constants';
 import {TargetEvent, WatcherEvent} from './enums';
 import Utils from './utils';
@@ -128,7 +128,7 @@ class Watcher extends EventEmitter {
 
   pollerExists ( targetPath: Path, options: WatcherOptions ): boolean { //FIXME: This doesn't actually allow for multiple pollers to the same paths, but potentially in the future the same path could be polled with different callbacks to be called, which this doesn't currently allow for
 
-    for ( const poller of this._pollers ) {
+    for ( const poller of Array.from(this._pollers) ) {
 
       if ( poller.targetPath !== targetPath ) continue;
 
@@ -144,7 +144,7 @@ class Watcher extends EventEmitter {
 
   subwatcherExists ( targetPath: Path, options: WatcherOptions ): boolean { //FIXME: This doesn't actually allow for multiple subwatchers to the same paths, but potentially in the future the same path could be subwatched with different callbacks to be called, which this doesn't currently allow for
 
-    for ( const subwatcher of this._subwatchers ) {
+    for ( const subwatcher of Array.from(this._subwatchers) ) {
 
       if ( subwatcher.targetPath !== targetPath ) continue;
 
diff --git a/node_modules/watcher/src/watcher_handler.ts b/node_modules/watcher/src/watcher_handler.ts
index 5aa71d0..ad5bda1 100644
--- a/node_modules/watcher/src/watcher_handler.ts
+++ b/node_modules/watcher/src/watcher_handler.ts
@@ -1,7 +1,7 @@
 
 /* IMPORT */
 
-import path from 'node:path';
+import * as path from 'node:path';
 import {DEBOUNCE, DEPTH, LIMIT, HAS_NATIVE_RECURSION, IS_WINDOWS} from './constants';
 import {FSTargetEvent, FSWatcherEvent, TargetEvent} from './enums';
 import Utils from './utils';
@@ -66,7 +66,7 @@ class WatcherHandler {
       const flush = async ( initials: Event[], regulars: Set<Path> ): Promise<void> => {
 
         const initialEvents = this.options.ignoreInitial ? [] : initials;
-        const regularEvents = await this.eventsPopulate ([ ...regulars ]);
+        const regularEvents = await this.eventsPopulate (Array.from(regulars));
         const events = this.eventsDeduplicate ([ ...initialEvents, ...regularEvents ]);
 
         this.onTargetEvents ( events );
@@ -186,7 +186,7 @@ class WatcherHandler {
 
     if ( isInitial ) return events;
 
-    for ( const folderPathOther of this.watcher._poller.stats.keys () ) {
+    for ( const folderPathOther of Array.from(this.watcher._poller.stats.keys ()) ) {
 
       if ( !Utils.fs.isSubPath ( targetPath, folderPathOther ) ) continue;
 
diff --git a/node_modules/watcher/src/watcher_locks_resolver.ts b/node_modules/watcher/src/watcher_locks_resolver.ts
index f99838d..c2fc8a7 100644
--- a/node_modules/watcher/src/watcher_locks_resolver.ts
+++ b/node_modules/watcher/src/watcher_locks_resolver.ts
@@ -54,7 +54,7 @@ const WatcherLocksResolver = {
 
     const now = Date.now ();
 
-    for ( const [fn, timestamp] of WatcherLocksResolver.fns ) {
+    for ( const [fn, timestamp] of Array.from(WatcherLocksResolver.fns.entries()) ) {
 
       if ( timestamp >= now ) continue; // We should still wait some more for this
 
